import React, { useContext, useState, useEffect } from "react";
import { FaBars, FaTimes } from "react-icons/fa";
import { IoMdSearch } from "react-icons/io";
import { IoChevronDownSharp, IoChevronUpSharp } from "react-icons/io5";
import Pluralcode from "../assets/PluralCode.png";
import Plc from "../assets/plc.png";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { TbLogout, TbRotateClockwise2 } from "react-icons/tb";
import { HiPlus, HiUser } from "react-icons/hi2";
import { MdDashboard } from "react-icons/md";
import { AuthContext } from "../context/AuthContext";
import { TfiHelpAlt } from "react-icons/tfi";
import { CgMenuRight } from "react-icons/cg";

const Profile = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);
  const [isDetailsVisible, setIsDetailsVisible] = useState(false);
  const [isNavScrolled, setIsNavScrolled] = useState(false);
  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);
  const [newPassword, setNewPassword] = useState("");
  const [confirmNewPassword, setConfirmNewPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [error, setError] = useState("");
  const [fileInput, setFileInput] = useState(null); // State to hold file input reference
  const [selectedOption, setSelectedOption] = useState("");

  const [refname1Error, setRefname1Error] = useState(false);
  const [refphone1Error, setRefphone1Error] = useState(false);
  const [refname2Error, setRefname2Error] = useState(false);
  const [refphone2Error, setRefphone2Error] = useState(false);

  const location = useLocation();
  const navigate = useNavigate();

  const { userData } = useContext(AuthContext); // Access user data

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  const toggleMobileSidebar = () => {
    setIsMobileSidebarOpen(!isMobileSidebarOpen);
  };

  const toggleDetailsVisibility = () => {
    setIsDetailsVisible((prev) => !prev);
  };

  const getLinkClasses = (path) => {
    return location.pathname === path
      ? "bg-pc_bg text-pc_orange border-l-4 border-pc_orange"
      : "text-pc_black";
  };

  const getLinkClasses2 = (path) => {
    return location.pathname === path
      ? "bg-white text-pc_orange border-l-4 border-pc_orange"
      : "text-pc_black";
  };

  const handleLogout = () => {
    localStorage.removeItem("isAuthenticated");
    navigate("/login");
  };
  // Function to get initials from the user's name
  const getInitials = (name) => {
    const nameArray = name.split(" ");
    const initials = nameArray.map((n) => n[0]).join("");
    return initials;
  };

  const { enrolledcourses, message, token, totalbalance, user } = userData;

  const {
    academy_level,
    age,
    country,
    year,
    student_id_number,
    state,
    email,
    phone_number,
    date,
    name,
    password,
    refname1,
    refname2,
    refphone1,
    refphone2,
  } = user;

  const [currentPassword, setCurrentPassword] = useState("");

  const togglePasswordModal = () => {
    setIsPasswordModalOpen(!isPasswordModalOpen);
    // Reset states when modal closes
    if (!isPasswordModalOpen) {
      setCurrentPassword("");
      setNewPassword("");
      setConfirmNewPassword("");
      setIsSuccess(false);
      setError("");
    }
  };

  // Capitalize the first letter of the email
  const capitalizedEmail = email.charAt(0).toUpperCase() + email.slice(1);

  // Handle scroll event to detect if the main content is scrolled
  useEffect(() => {
    const handleScroll = () => {
      const mainContent = document.getElementById("main-content");
      if (mainContent.scrollTop > 0) {
        setIsNavScrolled(true);
      } else {
        setIsNavScrolled(false);
      }
    };

    const mainContent = document.getElementById("main-content");
    mainContent.addEventListener("scroll", handleScroll);

    return () => {
      mainContent.removeEventListener("scroll", handleScroll);
    };
  }, []);

  const savePasswordChanges = () => {
    // Reset error messages
    setError("");

    // Input validation
    if (!currentPassword || !newPassword || !confirmNewPassword) {
      setError("Please fill in all fields.");
      return;
    }

    if (newPassword !== confirmNewPassword) {
      setError("New password and confirm password must match.");
      return;
    }

    // Prepare API request
    const myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");

    myHeaders.append("Authorization", `Bearer ${token}`);

    const raw = JSON.stringify({
      oldpassword: currentPassword,
      newpassword: newPassword,
      confirmpassword: confirmNewPassword,
    });

    const requestOptions = {
      method: "POST",
      headers: myHeaders,
      body: raw,
      redirect: "follow",
    };

    // Set loading state
    setIsLoading(true);

    // Call API
    fetch(
      "https://backend.pluralcode.institute/student/update-password",
      requestOptions
    )
      .then((response) => {
        setIsLoading(false);
        if (!response.ok) {
          throw new Error("Failed to update password.");
        }
        return response.text();
      })
      .then((result) => {
        setIsSuccess(true);
        setTimeout(() => {
          setIsPasswordModalOpen(false); // Close modal after 3 seconds
          setIsSuccess(false);
        }, 3000);
      })
      .catch((error) => {
        setIsLoading(false);
        setError("Failed to update password.");
      });
  };

  const saveChanges = () => {
    // Reset error message
    setError("");

    setRefname1Error(false);
    setRefphone1Error(false);
    setRefname2Error(false);
    setRefphone2Error(false);

    // Validate required inputs
    if (
      !refname1 ||
      !refphone1 ||
      !refname2 ||
      !refphone2 ||
      !fileInput ||
      !selectedOption
    ) {
      setError("All fields are required.");

      // Highlight inputs that are not filled
      if (!refname1) {
        setRefname1Error(true);
      }
      if (!refphone1) {
        setRefphone1Error(true);
      }
      if (!refname2) {
        setRefname2Error(true);
      }
      if (!refphone2) {
        setRefphone2Error(true);
      }
      if (!fileInput) {
        document.getElementById("file-upload").classList.add("border-red-500");
      }
      if (!selectedOption || selectedOption === "Select ID Type") {
        document
          .getElementById("select-option")
          .classList.add("border-red-500");
      }

      return;
    }

    // Prepare form data for API request
    const formdata = new FormData();
    formdata.append("refname1", refname1);
    formdata.append("refphone1", refphone1);
    formdata.append("refname2", refname2);
    formdata.append("refphone2", refphone2);
    formdata.append("image", fileInput.files[0], "hello.png");
    formdata.append("idname", "passport");

    const requestOptions = {
      method: "PUT",
      body: formdata,
      headers: {
        Authorization: `Bearer ${token}`,
      },
      redirect: "follow",
    };

    // Set loading state and change button text
    setIsLoading(true);

    // Call API
    fetch(
      "https://backend.pluralcode.institute/student/upload-reference-details",
      requestOptions
    )
      .then((response) => {
        setIsLoading(false);
        if (!response.ok) {
          throw new Error("Failed to update reference details.");
        }
        return response.text();
      })
      .then((result) => {
        setIsSuccess(true);
        setTimeout(() => {
          setIsSuccess(false);
        }, 3000);
      })
      .catch((error) => {
        setIsLoading(false);
        setError(error.message || "Failed to update reference details.");
      });
  };

  // Function to handle select change
  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  return (
    <div className="flex h-screen">
  

      {/* Main section */}
      <div className="flex flex-col flex-1">
   

        {/* Main Content */}
        <div
          className="flex-1 p-[20px] md:p-8 bg-pc_bg overflow-y-auto font-gilroy h-auto"
          id="main-content"
        >
          <div className="bg-pc_white_white min-h-screen rounded-xl p-[20px] lg:p-14 w-full lg:w-[90%]">
            <h2 className="text-[32px] font-gilroy_semibold leading-tight font-bold text-pc_blue">
              My Profile
            </h2>
            <p className="mt-2">Kindly click on any of the fields to edit</p>
            {/* Personal Information */}
            <div className="mt-20">
              <h2 className="text-[24px] font-gilroy_semibold leading-tight font-bold text-pc_blue">
                Personal Information
              </h2>
              <div className="mt-7 w-full space-y-5">
                {/* Name */}
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="name"
                    className="font-gilroy_light font-extralight"
                  >
                    Name
                  </label>
                  <input
                    type="text"
                    className="rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border border-[#939393]"
                    defaultValue={name}
                    readOnly
                  />
                </div>
                {/* Student id */}

                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="student_id"
                    className="font-gilroy_light font-extralight"
                  >
                    Student ID
                  </label>
                  <input
                    type="text"
                    className="rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border border-[#939393]"
                    defaultValue={student_id_number}
                    readOnly
                  />
                </div>
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="phone_number"
                    className="font-gilroy_light font-extralight"
                  >
                    Phone Number
                  </label>
                  <input
                    type="text"
                    className="rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border border-[#939393]"
                    defaultValue={phone_number}
                    readOnly
                  />
                </div>
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="name"
                    className="font-gilroy_light font-extralight"
                  >
                    Email
                  </label>
                  <input
                    type="email"
                    className="rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border border-[#939393]"
                    defaultValue={email}
                    readOnly
                  />
                </div>
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="password"
                    className="font-gilroy_light font-extralight"
                  >
                    Password
                  </label>
                  <div className="w-full relative">
                    <input
                      type="password"
                      className="rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border border-[#939393]"
                      defaultValue={password}
                      readOnly
                    />
                    <button
                      onClick={togglePasswordModal}
                      className="absolute right-8 top-[54%] cursor-pointer text-pc_orange leading-none translate-y-[-50%]"
                    >
                      <span className="pt-2 bg-pc_white_white px-4 lg:bg-transparent lg:px-0">
                        {" "}
                        Edit Password
                      </span>
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Reference */}
            <div className="mt-14">
              <h2 className="text-[24px] font-gilroy_semibold leading-tight font-bold text-pc_blue">
                Reference Information
              </h2>
              <div className="mt-7 w-full grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Name */}
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="name"
                    className="font-gilroy_light font-extralight"
                  >
                    Emergency Name
                  </label>
                  <input
                    type="text"
                    id="refname1"
                    className={`rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border ${
                      refphone1Error ? "border-red-500" : "border-[#939393]"
                    }`}
                    defaultValue={refphone1}
                    onChange={(e) => setRefphone1(e.target.value)}
                  />
                </div>
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="phone_number"
                    className="font-gilroy_light font-extralight"
                  >
                    Emergency Phone Number
                  </label>
                  <input
                    type="text"
                    id="refphone1"
                    className={`rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border ${
                      error && !refphone1
                        ? "border-red-500"
                        : "border-[#939393]"
                    }`}
                    defaultValue={refphone1}
                  />
                </div>
              </div>
            </div>

            {/* Reference 2 */}
            <div className="mt-14">
              <h2 className="text-[24px] font-gilroy_semibold leading-tight font-bold text-pc_blue">
                Reference Information II
              </h2>
              <div className="mt-7 w-full grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Name */}
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="name"
                    className="font-gilroy_light font-extralight"
                  >
                    Reference Name
                  </label>
                  <input
                    type="text"
                    id="refname2"
                    className={`rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border ${
                      error && !refname2 ? "border-red-500" : "border-[#939393]"
                    }`}
                    defaultValue={refname2}
                  />
                </div>
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="phone_number"
                    className="font-gilroy_light font-extralight"
                  >
                    Reference Phone Number
                  </label>
                  <input
                    type="text"
                    id="refphone2"
                    className={`rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border ${
                      error && !refphone2
                        ? "border-red-500"
                        : "border-[#939393]"
                    }`}
                    defaultValue={refphone2}
                  />
                </div>
              </div>
            </div>

            {/* Id information*/}
            <div className="mt-14">
              <h2 className="text-[24px] font-gilroy_semibold leading-tight font-bold text-pc_blue">
                ID Information
              </h2>
              <div className="mt-7 w-full grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="select-option"
                    className="font-gilroy_light font-extralight"
                  >
                    Select Option
                  </label>
                  <select
                    id="select-option"
                    className={`rounded-lg mt-2 px-6 py-4 w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border ${
                      error && !selectedOption
                        ? "border-red-500"
                        : "border-[#939393]"
                    }`}
                    onChange={handleSelectChange}
                  >
                    <option value="Select ID Type">Select ID Type</option>
                    <option value="International Passport">
                      International Passport
                    </option>
                    <option value="Driver's license">Driver's license</option>
                    <option value="Voters Card">Voters Card</option>
                    <option value="NIMC ID card">NIMC ID card</option>
                    <option value="NIN Slip">NIN Slip</option>
                  </select>
                </div>

                <div className="flex flex-col items-start justify-start">
                  <label
                    htmlFor="file-upload"
                    className="font-gilroy_light font-extralight"
                  >
                    Upload File
                  </label>
                  <div className="relative w-full">
                    <input
                      type="file"
                      id="file-upload"
                      className={`rounded-lg mt-2 px-6 py-[10px] w-full placeholder:text-[#939393] placeholder:font-gilroy_light placeholder:font-extralight placeholder:text-[15px] border ${
                        error && !fileInput
                          ? "border-red-500"
                          : "border-[#939393]"
                      }`}
                      onChange={(e) => setFileInput(e.target)}
                      accept=".png, .jpg, .jpeg, .svg"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Error message */}
            {error && <p className="text-red-500 mt-4">{error}</p>}

            <button
              onClick={saveChanges}
              className="mb-4 mt-20 rounded-lg px-6 py-4 w-full lg:w-[355px] bg-pc_orange text-white font-gilroy_semibold font-semibold hover:shadow-md hover:outline hover:outline-slate-200 transition-shadow duration-150 ease-linear flex items-center justify-center gap-2"
            >
              {isLoading ? (
                <>
                  <span>Saving...</span>
                  <TbRotateClockwise2 className="text-xl animate-spin" />
                </>
              ) : (
                "Save Changes"
              )}
            </button>

            {/* Success message */}
            {isSuccess && (
              <p className="text-green-500 mt-4">Changes saved successfully.</p>
            )}

            {/* Loading indicator */}
            {isLoading && (
              <p className="text-blue-500 mt-4">Saving changes...</p>
            )}
          </div>
        </div>
      </div>

    </div>
  );
};

export default Profile;
